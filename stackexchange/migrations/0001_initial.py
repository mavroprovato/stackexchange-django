# Generated by Django 3.2 on 2021-04-11 13:41

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The badge name', max_length=255, unique=True)),
                ('badge_class', models.SmallIntegerField(help_text='The badge class')),
                ('tag_based', models.BooleanField(help_text='If the badge is tag based')),
            ],
            options={
                'db_table': 'badges',
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, help_text='The post title', max_length=1000, null=True)),
                ('body', models.TextField(help_text='The post body')),
                ('type', models.CharField(help_text='The post type', max_length=30)),
                ('created', models.DateField(help_text='The post creation date')),
                ('last_edit', models.DateField(blank=True, help_text='The post last edit date', null=True)),
                ('last_activity', models.DateField(help_text='The post last activity date')),
                ('score', models.IntegerField(help_text='The post score')),
                ('view_count', models.PositiveIntegerField(blank=True, help_text='The post view count', null=True)),
                ('answer_count', models.PositiveIntegerField(blank=True, help_text='The post answer count', null=True)),
                ('comment_count', models.PositiveIntegerField(blank=True, help_text='The post comment count', null=True)),
                ('favorite_count', models.PositiveIntegerField(blank=True, help_text='The post favorite count', null=True)),
            ],
            options={
                'db_table': 'posts',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_name', models.CharField(help_text='The user display name', max_length=255)),
                ('website', models.URLField(blank=True, help_text='The user web site', null=True)),
                ('location', models.CharField(blank=True, help_text='The user location', max_length=255, null=True)),
                ('about', models.TextField(blank=True, help_text='The user about information', null=True)),
                ('created', models.DateField(help_text='The user creation date')),
                ('reputation', models.PositiveIntegerField(help_text='The user reputation')),
                ('views', models.PositiveIntegerField(help_text='The user profile views')),
                ('up_votes', models.PositiveIntegerField(help_text='The user up votes')),
                ('down_votes', models.PositiveIntegerField(help_text='The user down votes')),
            ],
            options={
                'db_table': 'users',
            },
        ),
        migrations.CreateModel(
            name='UserBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_awarded', models.DateTimeField(help_text='The date awarded')),
                ('badge', models.ForeignKey(help_text='The badge', on_delete=django.db.models.deletion.CASCADE, related_name='user_badges', to='stackexchange.badge')),
                ('user', models.ForeignKey(help_text='The user', on_delete=django.db.models.deletion.CASCADE, related_name='user_badges', to='stackexchange.user')),
            ],
            options={
                'db_table': 'user_badges',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The tag name', max_length=255, unique=True)),
                ('count', models.IntegerField(help_text='The tag count')),
                ('excerpt', models.ForeignKey(blank=True, help_text='The tag excerpt', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tag_excerpts', to='stackexchange.post')),
                ('wiki', models.ForeignKey(blank=True, help_text='The tag wiki', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tag_wikis', to='stackexchange.post')),
            ],
            options={
                'db_table': 'tags',
            },
        ),
        migrations.CreateModel(
            name='PostTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post', models.ForeignKey(help_text='The post', on_delete=django.db.models.deletion.CASCADE, related_name='post_tags', to='stackexchange.post')),
                ('tag', models.ForeignKey(help_text='The tag', on_delete=django.db.models.deletion.CASCADE, related_name='post_tags', to='stackexchange.tag')),
            ],
            options={
                'db_table': 'post_tags',
            },
        ),
        migrations.AddField(
            model_name='post',
            name='last_editor',
            field=models.ForeignKey(blank=True, help_text='The owner', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='last_editor_posts', to='stackexchange.user'),
        ),
        migrations.AddField(
            model_name='post',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='The owner', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='owner_posts', to='stackexchange.user'),
        ),
    ]
