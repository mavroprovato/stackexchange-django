"""Initial database migration
"""

# Generated by Django 5.1.2 on 2024-10-09 00:23

from django.conf import settings
from django.contrib.postgres import indexes, search
from django.db import migrations, models
import django.utils.timezone

import stackexchange.managers


class Migration(migrations.Migration):
    """The initial database migration.\
    """
    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(help_text='The user name', max_length=255, unique=True)),
                (
                    'email',
                    models.EmailField(blank=True, help_text='The user email', max_length=255, null=True, unique=True)
                ),
                ('staff', models.BooleanField(default=False, help_text='True if the user is member of the staff')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', stackexchange.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The badge name', max_length=255, unique=True)),
                (
                    'badge_class',
                    models.PositiveSmallIntegerField(
                        choices=[(1, 'Gold'), (2, 'Silver'), (3, 'Bronze')], help_text='The badge class'
                    )
                ),
                (
                    'badge_type',
                    models.PositiveSmallIntegerField(
                        choices=[(1, 'Named'), (2, 'Tag based')], help_text='The badge type'
                    )
                ),
            ],
            options={
                'db_table': 'badges',
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'type',
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, 'Question'), (2, 'Answer'), (3, 'Wiki'), (4, 'Tag wiki expert'), (5, 'Tag wiki'),
                            (6, 'Moderator nomination'), (7, 'Wiki placeholder'), (8, 'Privilege wiki')
                        ],
                        help_text='The post type'
                    )
                ),
                ('title', models.CharField(blank=True, help_text='The post title', max_length=1000, null=True)),
                ('body', models.TextField(help_text='The post body')),
                (
                    'last_editor_display_name',
                    models.CharField(blank=True, help_text='The last editor display name', max_length=255, null=True)
                ),
                (
                    'creation_date',
                    models.DateTimeField(default=django.utils.timezone.now, help_text='The post creation date')
                ),
                ('last_edit_date', models.DateTimeField(auto_now=True, help_text='The post last edit date', null=True)),
                ('last_activity_date', models.DateTimeField(help_text='The post last activity date')),
                (
                    'community_owned_date',
                    models.DateTimeField(blank=True, help_text='The post community owned date', null=True)
                ),
                ('closed_date', models.DateTimeField(blank=True, help_text='The post closed date', null=True)),
                ('score', models.IntegerField(help_text='The post score')),
                ('view_count', models.PositiveIntegerField(default=0, help_text='The post view count')),
                ('answer_count', models.PositiveIntegerField(default=0, help_text='The post answer count')),
                ('comment_count', models.PositiveIntegerField(default=0, help_text='The post comment count')),
                ('favorite_count', models.PositiveIntegerField(default=0, help_text='The post favorite count')),
                (
                    'content_license',
                    models.CharField(
                        choices=[
                            ('CC_BY_SA_2_5', 'Attribution-ShareAlike 2.5 Generic'),
                            ('CC_BY_SA_3_0', 'Attribution-ShareAlike 3.0 Unported'),
                            ('CC_BY_SA_4_0', 'Attribution-ShareAlike 4.0 International')
                        ], default='CC_BY_SA_4_0', help_text='The content license', max_length=40
                    )
                ),
                (
                    'title_search',
                    django.contrib.postgres.search.SearchVectorField(help_text='The title search vector', null=True)
                ),
                (
                    'accepted_answer',
                    models.ForeignKey(
                        blank=True, help_text='The accepted answer, if the post type is QUESTION', null=True,
                        on_delete=django.db.models.deletion.CASCADE, related_name='accepted_answers',
                        to='stackexchange.post'
                    )
                ),
                (
                    'question',
                    models.ForeignKey(
                        blank=True, help_text='The post question, if the post type is ANSWER', null=True,
                        on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='stackexchange.post'
                    )
                ),
            ],
            options={
                'db_table': 'posts',
            },
        ),
        migrations.CreateModel(
            name='PostLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'type',
                    models.PositiveSmallIntegerField(
                        choices=[(1, 'Linked'), (3, 'Duplicate')], help_text='The post link type'
                    )
                ),
                (
                    'post',
                    models.ForeignKey(
                        help_text='The post', on_delete=django.db.models.deletion.CASCADE, related_name='links',
                        to='stackexchange.post'
                    )
                ),
                (
                    'related_post',
                    models.ForeignKey(
                        help_text='The related post', on_delete=django.db.models.deletion.CASCADE,
                        related_name='related_links', to='stackexchange.post'
                    )
                ),
            ],
            options={
                'db_table': 'post_links',
            },
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The site name', max_length=32, unique=True)),
                ('description', models.CharField(help_text='The site description', max_length=64)),
                ('long_description', models.CharField(help_text='The site long description', max_length=128)),
                ('url', models.URLField(help_text='The site URL')),
                ('image_url', models.URLField(help_text='The site image URL')),
                ('icon_url', models.URLField(help_text='The site icon URL')),
                ('badge_icon_url', models.URLField(help_text='The site badge icon URL')),
                ('tag_css', models.TextField(help_text='CSS for tags')),
                ('tagline', models.CharField(help_text='The site tagline', max_length=256)),
                ('total_questions', models.PositiveIntegerField(default=0, help_text='The site total question count')),
                ('total_answers', models.PositiveIntegerField(default=0, help_text='The site total answer count')),
                ('total_users', models.PositiveIntegerField(default=0, help_text='The site total user count')),
                ('total_comments', models.PositiveIntegerField(default=0, help_text='The site total comment count')),
                ('total_tags', models.PositiveIntegerField(default=0, help_text='The site total tag count')),
                ('last_post_date', models.DateTimeField(blank=True, help_text='The date of the last post', null=True)),
                (
                    'parent',
                    models.ForeignKey(
                        blank=True, help_text='The parent site', null=True, on_delete=django.db.models.deletion.CASCADE,
                        to='stackexchange.site'
                    )
                ),
            ],
            options={
                'db_table': 'sites',
            },
        ),
        migrations.CreateModel(
            name='SiteUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_name', models.CharField(help_text='The site user display name', max_length=255)),
                ('website_url', models.URLField(blank=True, help_text='The user web site URL', null=True)),
                ('location', models.CharField(blank=True, help_text='The user location', max_length=255, null=True)),
                ('about', models.TextField(blank=True, help_text='The user about information', null=True)),
                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='The site user creation date')),
                (
                    'last_modified_date',
                    models.DateTimeField(auto_now=True, help_text='The site user last modified date')
                ),
                ('last_access_date', models.DateTimeField(help_text='The site user last access date')),
                ('reputation', models.PositiveIntegerField(default=0, help_text='The site user reputation')),
                ('views', models.PositiveIntegerField(default=0, help_text='The site user views')),
                ('up_votes', models.PositiveIntegerField(default=0, help_text='The site user up votes')),
                ('down_votes', models.PositiveIntegerField(default=0, help_text='The site user down votes')),
                (
                    'site',
                    models.ForeignKey(
                        help_text='The site', on_delete=django.db.models.deletion.CASCADE, to='stackexchange.site'
                    )
                ),
                (
                    'user',
                    models.ForeignKey(
                        blank=True, help_text='The user', null=True, on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL
                    )
                ),
            ],
            options={
                'db_table': 'site_users',
            },
        ),
        migrations.CreateModel(
            name='PostVote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'type',
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, 'Accepted by originator'), (2, 'Up mod'), (3, 'Down mod'), (4, 'Offensive'),
                            (5, 'Favorite'), (6, 'Close'), (7, 'Reopen'), (8, 'Bounty start'), (9, 'Bounty close'),
                            (10, 'Deletion'), (11, 'Un deletion'), (12, 'Spam'), (13, 'Inform moderator')
                        ], help_text='The post vote type'
                    )
                ),
                (
                    'creation_date',
                    models.DateTimeField(
                        default=django.utils.timezone.now, help_text='The date that this vote was created'
                    )
                ),
                (
                    'bounty_amount',
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text='The post bounty amount, if the post vote type is BOUNTY_START or BOUNTY_CLOSE',
                        null=True
                    )
                ),
                (
                    'post',
                    models.ForeignKey(
                        help_text='The post', on_delete=django.db.models.deletion.CASCADE, related_name='votes',
                        to='stackexchange.post'
                    )
                ),
                (
                    'user',
                    models.ForeignKey(
                        blank=True,
                        help_text='The user for the post vote, if the post vote type is FAVORITE or BOUNTY_START',
                        null=True, on_delete=django.db.models.deletion.CASCADE, related_name='votes',
                        to='stackexchange.siteuser'
                    )
                ),
            ],
            options={
                'db_table': 'post_votes',
            },
        ),
        migrations.CreateModel(
            name='PostHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'type',
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, 'Initial title'), (2, 'Initial body'), (3, 'Initial tags'), (4, 'Edit title'),
                            (5, 'Edit body'), (6, 'Edit tags'), (7, 'Rollback title'), (8, 'Rollback body'),
                            (9, 'Rollback tags'), (10, 'Post closed'), (11, 'Post reopened'), (12, 'Post deleted'),
                            (13, 'Post undeleted'), (14, 'Post locked'), (15, 'Post unlocked'), (16, 'Community owned'),
                            (17, 'Post migrated'), (18, 'Question merged'), (19, 'Question protected'),
                            (20, 'Question unprotected'), (22, 'Question unmerged'), (24, 'Suggested edit applied'),
                            (25, 'Post tweeted'), (31, 'Discussion moved to chat'), (33, 'Post notice added'),
                            (34, 'Post notice removed'), (35, 'Post migrated away'), (36, 'Post migrated here'),
                            (37, 'Post merge source'), (38, 'Post merge destination'), (50, 'Community bump'),
                            (52, 'Selected hot question'), (53, 'Removed hot question')
                        ], help_text='The post history type')
                ),
                (
                    'revision_guid',
                    models.UUIDField(help_text='The GUID of the action that created this history record')
                ),
                (
                    'creation_date',
                    models.DateTimeField(
                        default=django.utils.timezone.now, help_text='The date that this history record was created'
                    )
                ),
                (
                    'user_display_name',
                    models.CharField(
                        blank=True, help_text='The display name of the user that created this record', max_length=255,
                        null=True
                    )
                ),
                (
                    'comment',
                    models.TextField(
                        blank=True, help_text='The comment of the user that has edited this post', null=True
                    )
                ),
                (
                    'text',
                    models.TextField(
                        blank=True, help_text='A raw version of the new value for a given revision', null=True
                    )
                ),
                (
                    'content_license',
                    models.CharField(
                        choices=[
                            ('CC_BY_SA_2_5', 'Attribution-ShareAlike 2.5 Generic'),
                            ('CC_BY_SA_3_0', 'Attribution-ShareAlike 3.0 Unported'),
                            ('CC_BY_SA_4_0', 'Attribution-ShareAlike 4.0 International')
                        ], default='CC_BY_SA_4_0', help_text='The content license', max_length=40
                    )
                ),
                (
                    'post',
                    models.ForeignKey(
                        help_text='The post', on_delete=django.db.models.deletion.CASCADE, related_name='history',
                        to='stackexchange.post'
                    )
                ),
                (
                    'user',
                    models.ForeignKey(
                        blank=True, help_text='The user that created this history record', null=True,
                        on_delete=django.db.models.deletion.CASCADE, related_name='post_history',
                        to='stackexchange.siteuser'
                    )
                ),
            ],
            options={
                'verbose_name_plural': 'post history',
                'db_table': 'post_history',
            },
        ),
        migrations.CreateModel(
            name='PostComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(help_text='The comment score')),
                ('text', models.TextField(help_text='The comment text')),
                (
                    'creation_date',
                    models.DateTimeField(
                        default=django.utils.timezone.now, help_text='The date that the comment was created'
                    )
                ),
                (
                    'content_license',
                    models.CharField(
                        choices=[
                            ('CC_BY_SA_2_5', 'Attribution-ShareAlike 2.5 Generic'),
                            ('CC_BY_SA_3_0', 'Attribution-ShareAlike 3.0 Unported'),
                            ('CC_BY_SA_4_0', 'Attribution-ShareAlike 4.0 International')
                        ],
                        default='CC_BY_SA_4_0', help_text='The content license', max_length=40
                    )
                ),
                (
                    'user_display_name',
                    models.CharField(blank=True, help_text='The user display name', max_length=255, null=True)
                ),
                (
                    'post',
                    models.ForeignKey(
                        help_text='The post', on_delete=django.db.models.deletion.CASCADE, related_name='comments',
                        to='stackexchange.post'
                    )
                ),
                (
                    'user',
                    models.ForeignKey(
                        blank=True, help_text='The user for the comment', null=True,
                        on_delete=django.db.models.deletion.CASCADE, related_name='comments',
                        to='stackexchange.siteuser'
                    )
                ),
            ],
            options={
                'db_table': 'post_comments',
            },
        ),
        migrations.AddField(
            model_name='post',
            name='last_editor',
            field=models.ForeignKey(
                blank=True, help_text='The last editor of the post', null=True,
                on_delete=django.db.models.deletion.CASCADE, related_name='last_edited_posts',
                to='stackexchange.siteuser'
            ),
        ),
        migrations.AddField(
            model_name='post',
            name='owner',
            field=models.ForeignKey(
                blank=True, help_text='The owner of the post', null=True, on_delete=django.db.models.deletion.CASCADE,
                related_name='posts', to='stackexchange.siteuser'
            ),
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The tag name', max_length=255, unique=True)),
                ('award_count', models.IntegerField(help_text='The tag award count')),
                ('moderator_only', models.BooleanField(default=False, help_text='Tag is for moderators only')),
                ('required', models.BooleanField(default=False, help_text='Tag is required')),
                (
                    'excerpt',
                    models.ForeignKey(
                        blank=True, help_text='The tag excerpt', null=True, on_delete=django.db.models.deletion.CASCADE,
                        related_name='excerpts', to='stackexchange.post'
                    )
                ),
                (
                    'wiki',
                    models.ForeignKey(
                        blank=True, help_text='The tag wiki', null=True, on_delete=django.db.models.deletion.CASCADE,
                        related_name='wikis', to='stackexchange.post'
                    )
                ),
            ],
            options={
                'db_table': 'tags',
            },
        ),
        migrations.CreateModel(
            name='PostTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'post',
                    models.ForeignKey(
                        help_text='The post', on_delete=django.db.models.deletion.CASCADE, related_name='post_tags',
                        to='stackexchange.post'
                    )
                ),
                (
                    'tag',
                    models.ForeignKey(
                        help_text='The tag', on_delete=django.db.models.deletion.CASCADE, related_name='post_tags',
                        to='stackexchange.tag'
                    )
                ),
            ],
            options={
                'db_table': 'post_tags',
            },
        ),
        migrations.AddField(
            model_name='post',
            name='tags',
            field=models.ManyToManyField(
                help_text='The post tags', related_name='posts', through='stackexchange.PostTag', to='stackexchange.tag'
            ),
        ),
        migrations.CreateModel(
            name='UserBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_awarded', models.DateTimeField(default=django.utils.timezone.now, help_text='The date awarded')),
                (
                    'badge',
                    models.ForeignKey(
                        help_text='The badge', on_delete=django.db.models.deletion.CASCADE, related_name='users',
                        to='stackexchange.badge'
                    )
                ),
                (
                    'user',
                    models.ForeignKey(
                        help_text='The site user', on_delete=django.db.models.deletion.CASCADE, related_name='badges',
                        to='stackexchange.siteuser'
                    )
                ),
            ],
            options={
                'db_table': 'user_badges',
            },
        ),
        migrations.AddIndex(
            model_name='siteuser',
            index=models.Index(fields=['user', 'site'], name='site_users_user_id_eecc2c_idx'),
        ),
        migrations.AddIndex(
            model_name='postvote',
            index=models.Index(fields=['-creation_date', '-id'], name='post_votes_creatio_c200e8_idx'),
        ),
        migrations.AddIndex(
            model_name='postcomment',
            index=models.Index(fields=['-creation_date', 'id'], name='post_commen_creatio_3cb624_idx'),
        ),
        migrations.AddIndex(
            model_name='postcomment',
            index=models.Index(fields=['-score', 'id'], name='post_commen_score_26c330_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='posttag',
            unique_together={('post', 'tag')},
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['-last_activity_date', 'id'], name='posts_last_ac_47009c_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['-creation_date', 'id'], name='posts_creatio_68cf8e_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['-score', 'id'], name='posts_score_555f1f_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=django.contrib.postgres.indexes.GinIndex(fields=['title_search'], name='posts_title_s_2e0242_gin'),
        ),
        migrations.AddIndex(
            model_name='userbadge',
            index=models.Index(fields=['-date_awarded', 'id'], name='user_badges_date_aw_ee4606_idx'),
        ),
        migrations.RunSQL(
            sql='''
                CREATE TRIGGER title_search_trigger
                BEFORE INSERT OR UPDATE OF title ON posts
                FOR EACH ROW EXECUTE PROCEDURE tsvector_update_trigger(title_search, 'pg_catalog.english', title);
            ''',
            reverse_sql='DROP TRIGGER IF EXISTS title_search_trigger ON posts;'
        )
    ]
