# Generated by Django 3.2.12 on 2022-03-22 22:30

from django.conf import settings
import django.contrib.postgres.fields.citext
import django.contrib.postgres.indexes
import django.contrib.postgres.search
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import stackexchange.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', django.contrib.postgres.fields.citext.CICharField(help_text='The user name', max_length=255, unique=True)),
                ('email', django.contrib.postgres.fields.citext.CIEmailField(help_text='The user email', max_length=255, unique=True)),
                ('display_name', models.CharField(help_text='The user display name', max_length=255)),
                ('website_url', models.URLField(blank=True, help_text='The user web site URL', null=True)),
                ('location', models.CharField(blank=True, help_text='The user location', max_length=255, null=True)),
                ('about', models.TextField(blank=True, help_text='The user about information', null=True)),
                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='The user creation date')),
                ('last_modified_date', models.DateTimeField(auto_now=True, help_text='The user creation date', null=True)),
                ('last_access_date', models.DateTimeField(default=django.utils.timezone.now, help_text='The user last access date')),
                ('reputation', models.PositiveIntegerField(default=0, help_text='The user reputation')),
                ('views', models.PositiveIntegerField(default=0, help_text='The user profile views')),
                ('up_votes', models.PositiveIntegerField(default=0, help_text='The user up votes')),
                ('down_votes', models.PositiveIntegerField(default=0, help_text='The user down votes')),
                ('is_active', models.BooleanField(default=True, help_text='If the user is active')),
                ('is_employee', models.BooleanField(default=False, help_text='If the user is an employee')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', stackexchange.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The badge name', max_length=255, unique=True)),
                ('badge_class', models.PositiveSmallIntegerField(choices=[(1, 'Gold'), (2, 'Silver'), (3, 'Bronze')], help_text='The badge class')),
                ('badge_type', models.PositiveSmallIntegerField(choices=[(1, 'Named'), (2, 'Tag_based')], help_text='The badge type')),
            ],
            options={
                'db_table': 'badges',
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.PositiveSmallIntegerField(choices=[(1, 'Question'), (2, 'Answer'), (3, 'Wiki'), (4, 'Tag_wiki_expert'), (5, 'Tag_wiki'), (6, 'Moderator_nomination'), (7, 'Wiki_placeholder'), (8, 'Privilege_wiki')], help_text='The post type')),
                ('title', models.CharField(blank=True, help_text='The post title', max_length=1000, null=True)),
                ('body', models.TextField(help_text='The post body')),
                ('last_editor_display_name', models.CharField(blank=True, help_text='The last editor display name', max_length=255, null=True)),
                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='The post creation date')),
                ('last_edit_date', models.DateTimeField(auto_now=True, help_text='The post last edit date', null=True)),
                ('last_activity_date', models.DateTimeField(help_text='The post last activity date')),
                ('community_owned_date', models.DateTimeField(blank=True, help_text='The post community owned date', null=True)),
                ('closed_date', models.DateTimeField(blank=True, help_text='The post closed date', null=True)),
                ('score', models.IntegerField(help_text='The post score')),
                ('view_count', models.PositiveIntegerField(blank=True, help_text='The post view count', null=True)),
                ('answer_count', models.PositiveIntegerField(blank=True, help_text='The post answer count', null=True)),
                ('comment_count', models.PositiveIntegerField(blank=True, help_text='The post comment count', null=True)),
                ('favorite_count', models.PositiveIntegerField(blank=True, help_text='The post favorite count', null=True)),
                ('content_license', models.CharField(choices=[('CC_BY_SA_2_5', 'Attribution-ShareAlike 2.5 Generic'), ('CC_BY_SA_3_0', 'Attribution-ShareAlike 3.0 Unported'), ('CC_BY_SA_4_0', 'Attribution-ShareAlike 4.0 International')], default='CC_BY_SA_4_0', help_text='The content license', max_length=12)),
                ('title_search', django.contrib.postgres.search.SearchVectorField(help_text='The title search vector', null=True)),
                ('accepted_answer', models.ForeignKey(blank=True, help_text='The accepted answer, if the post type is QUESTION', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='accepted_answers', to='stackexchange.post')),
                ('last_editor', models.ForeignKey(blank=True, help_text='The last editor of the post', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='last_edited_posts', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(blank=True, help_text='The owner of the post', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='posts', to=settings.AUTH_USER_MODEL)),
                ('question', models.ForeignKey(blank=True, help_text='The post question, if the post type is ANSWER', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='stackexchange.post')),
            ],
            options={
                'db_table': 'posts',
            },
        ),
        migrations.CreateModel(
            name='UserBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_awarded', models.DateTimeField(auto_now_add=True, help_text='The date awarded')),
                ('badge', models.ForeignKey(help_text='The badge', on_delete=django.db.models.deletion.CASCADE, related_name='users', to='stackexchange.badge')),
                ('user', models.ForeignKey(help_text='The user', on_delete=django.db.models.deletion.CASCADE, related_name='badges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_badges',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', django.contrib.postgres.fields.citext.CICharField(help_text='The tag name', max_length=255, unique=True)),
                ('award_count', models.IntegerField(help_text='The tag award count')),
                ('excerpt', models.ForeignKey(blank=True, help_text='The tag excerpt', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='excerpts', to='stackexchange.post')),
                ('wiki', models.ForeignKey(blank=True, help_text='The tag wiki', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='wikis', to='stackexchange.post')),
            ],
            options={
                'db_table': 'tags',
            },
        ),
        migrations.CreateModel(
            name='PostVote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.PositiveSmallIntegerField(choices=[(1, 'Accepted_by_originator'), (2, 'Up_mod'), (3, 'Down_mod'), (4, 'Offensive'), (5, 'Favorite'), (6, 'Close'), (7, 'Reopen'), (8, 'Bounty_start'), (9, 'Bounty_close'), (10, 'Deletion'), (11, 'Un_deletion'), (12, 'Spam'), (13, 'Inform_moderator')], help_text='The post vote type')),
                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='The date that this vote was created')),
                ('bounty_amount', models.PositiveSmallIntegerField(blank=True, help_text='The post bounty amount, if the post vote type is BOUNTY_START or BOUNTY_CLOSE', null=True)),
                ('post', models.ForeignKey(help_text='The post', on_delete=django.db.models.deletion.CASCADE, related_name='post_votes', to='stackexchange.post')),
                ('user', models.ForeignKey(blank=True, help_text='The user for the post vote, if the post vote type is FAVORITE or BOUNTY_START', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_favorites', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'post_votes',
            },
        ),
        migrations.CreateModel(
            name='PostTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post', models.ForeignKey(help_text='The post', on_delete=django.db.models.deletion.CASCADE, related_name='post_tags', to='stackexchange.post')),
                ('tag', models.ForeignKey(help_text='The tag', on_delete=django.db.models.deletion.CASCADE, related_name='post_tags', to='stackexchange.tag')),
            ],
            options={
                'db_table': 'post_tags',
            },
        ),
        migrations.CreateModel(
            name='PostLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.PositiveSmallIntegerField(choices=[(1, 'Linked'), (3, 'Duplicate')], help_text='The post link type')),
                ('post', models.ForeignKey(help_text='The post', on_delete=django.db.models.deletion.CASCADE, related_name='links', to='stackexchange.post')),
                ('related_post', models.ForeignKey(help_text='The related post', on_delete=django.db.models.deletion.CASCADE, related_name='related_links', to='stackexchange.post')),
            ],
            options={
                'db_table': 'post_links',
            },
        ),
        migrations.CreateModel(
            name='PostHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.PositiveSmallIntegerField(choices=[(1, 'Initial_title'), (2, 'Initial_body'), (3, 'Initial_tags'), (4, 'Edit_title'), (5, 'Edit_body'), (6, 'Edit_tags'), (7, 'Rollback_title'), (8, 'Rollback_body'), (9, 'Rollback_tags'), (10, 'Post_closed'), (11, 'Post_reopened'), (12, 'Post_deleted'), (13, 'Post_undeleted'), (14, 'Post_locked'), (15, 'Post_unlocked'), (16, 'Community_owned'), (17, 'Post_migrated'), (18, 'Question_merged'), (19, 'Question_protected'), (20, 'Question_unprotected'), (21, 'Post_disassociated'), (22, 'Question_unmerged')], help_text='The post history type')),
                ('revision_guid', models.CharField(help_text='The GUID of the action that created this history record', max_length=36)),
                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='The date that this history record was created')),
                ('user_display_name', models.CharField(blank=True, help_text='The display name of the user that created this record, if the user has been removed and no longer referenced by id', max_length=255, null=True)),
                ('comment', models.TextField(blank=True, help_text='The comment of the user that has edited this post', null=True)),
                ('text', models.TextField(blank=True, help_text='A raw version of the new value for a given revision', null=True)),
                ('content_license', models.CharField(blank=True, choices=[('CC_BY_SA_2_5', 'Attribution-ShareAlike 2.5 Generic'), ('CC_BY_SA_3_0', 'Attribution-ShareAlike 3.0 Unported'), ('CC_BY_SA_4_0', 'Attribution-ShareAlike 4.0 International')], default='CC_BY_SA_4_0', help_text='The content license', max_length=12, null=True)),
                ('post', models.ForeignKey(help_text='The post', on_delete=django.db.models.deletion.CASCADE, related_name='post_history', to='stackexchange.post')),
                ('user', models.ForeignKey(blank=True, help_text='The user that created this history record', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='post_history', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'post history',
                'db_table': 'post_history',
            },
        ),
        migrations.AddField(
            model_name='post',
            name='tags',
            field=models.ManyToManyField(related_name='posts', through='stackexchange.PostTag', to='stackexchange.Tag'),
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(help_text='The comment score')),
                ('text', models.TextField(help_text='The comment text')),
                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='The date that the comment was created')),
                ('content_license', models.CharField(choices=[('CC_BY_SA_2_5', 'Attribution-ShareAlike 2.5 Generic'), ('CC_BY_SA_3_0', 'Attribution-ShareAlike 3.0 Unported'), ('CC_BY_SA_4_0', 'Attribution-ShareAlike 4.0 International')], default='CC_BY_SA_4_0', help_text='The content license', max_length=12)),
                ('post', models.ForeignKey(help_text='The post', on_delete=django.db.models.deletion.CASCADE, related_name='post_comments', to='stackexchange.post')),
                ('user', models.ForeignKey(blank=True, help_text='The user for the comment', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'comments',
            },
        ),
        migrations.AddIndex(
            model_name='userbadge',
            index=models.Index(fields=['-date_awarded', 'id'], name='user_badges_date_aw_ee4606_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['-last_activity_date', 'id'], name='posts_last_ac_47009c_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['-creation_date', 'id'], name='posts_creatio_68cf8e_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['-score', 'id'], name='posts_score_555f1f_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=django.contrib.postgres.indexes.GinIndex(fields=['title_search'], name='posts_title_s_2e0242_gin'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['-creation_date', 'id'], name='comments_creatio_be8f36_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['-score', 'id'], name='comments_score_421da4_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['-reputation', 'id'], name='users_reputat_401cc0_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['-creation_date', 'id'], name='users_creatio_608edf_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['display_name', 'id'], name='users_display_8735d0_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['-last_modified_date', 'id'], name='users_last_mo_c6b797_idx'),
        ),
    ]
