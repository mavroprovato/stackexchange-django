# Generated by Django 3.2 on 2021-04-13 22:32

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import stackexchange.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(help_text='The user name', max_length=255, unique=True)),
                ('email', models.EmailField(help_text='The user email', max_length=255, unique=True)),
                ('display_name', models.CharField(help_text='The user display name', max_length=255)),
                ('website', models.URLField(blank=True, help_text='The user web site', null=True)),
                ('location', models.CharField(blank=True, help_text='The user location', max_length=255, null=True)),
                ('about', models.TextField(blank=True, help_text='The user about information', null=True)),
                ('created', models.DateField(auto_now_add=True, help_text='The user creation date')),
                ('reputation', models.PositiveIntegerField(default=0, help_text='The user reputation')),
                ('views', models.PositiveIntegerField(default=0, help_text='The user profile views')),
                ('up_votes', models.PositiveIntegerField(default=0, help_text='The user up votes')),
                ('down_votes', models.PositiveIntegerField(default=0, help_text='The user down votes')),
                ('is_active', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', stackexchange.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The badge name', max_length=255, unique=True)),
                ('badge_class', models.CharField(choices=[('1', 'Gold'), ('2', 'Silver'), ('3', 'Bronze')], help_text='The badge class', max_length=1)),
                ('tag_based', models.BooleanField(help_text='If the badge is tag based')),
            ],
            options={
                'db_table': 'badges',
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, help_text='The post title', max_length=1000, null=True)),
                ('body', models.TextField(help_text='The post body')),
                ('type', models.CharField(choices=[('1', 'Question'), ('2', 'Answer'), ('3', 'Wiki'), ('4', 'Tag Wiki Expert'), ('6', 'Moderator Nomination'), ('7', 'Wiki Placeholder'), ('8', 'Privilege Wiki')], help_text='The post type', max_length=1)),
                ('created', models.DateField(auto_now_add=True, help_text='The post creation date')),
                ('last_edit', models.DateField(auto_now=True, help_text='The post last edit date', null=True)),
                ('last_activity', models.DateField(help_text='The post last activity date')),
                ('score', models.IntegerField(help_text='The post score')),
                ('view_count', models.PositiveIntegerField(blank=True, help_text='The post view count', null=True)),
                ('answer_count', models.PositiveIntegerField(blank=True, help_text='The post answer count', null=True)),
                ('comment_count', models.PositiveIntegerField(blank=True, help_text='The post comment count', null=True)),
                ('favorite_count', models.PositiveIntegerField(blank=True, help_text='The post favorite count', null=True)),
                ('last_editor', models.ForeignKey(blank=True, help_text='The last editor of the post', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='last_editor_posts', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(blank=True, help_text='The owner of the post', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='owner_posts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'posts',
            },
        ),
        migrations.CreateModel(
            name='UserBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_awarded', models.DateTimeField(auto_now_add=True, help_text='The date awarded')),
                ('badge', models.ForeignKey(help_text='The badge', on_delete=django.db.models.deletion.CASCADE, related_name='user_badges', to='stackexchange.badge')),
                ('user', models.ForeignKey(help_text='The user', on_delete=django.db.models.deletion.CASCADE, related_name='user_badges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_badges',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The tag name', max_length=255, unique=True)),
                ('count', models.IntegerField(help_text='The tag count')),
                ('excerpt', models.ForeignKey(blank=True, help_text='The tag excerpt', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tag_excerpts', to='stackexchange.post')),
                ('wiki', models.ForeignKey(blank=True, help_text='The tag wiki', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tag_wikis', to='stackexchange.post')),
            ],
            options={
                'db_table': 'tags',
            },
        ),
        migrations.CreateModel(
            name='PostVote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('1', 'AcceptedByOriginator'), ('2', 'UpMod'), ('3', 'DownMod'), ('4', 'Offensive'), ('5', 'Favorite'), ('6', 'Close'), ('7', 'Reopen'), ('8', 'Bounty Start'), ('9', 'Bounty Close'), ('10', 'Deletion'), ('11', 'Un-deletion'), ('12', 'Spam'), ('13', 'Inform Moderator')], help_text='The post vote type', max_length=2)),
                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='The date that this vote was created')),
                ('post', models.ForeignKey(help_text='The post', on_delete=django.db.models.deletion.CASCADE, related_name='post_votes', to='stackexchange.post')),
                ('user', models.ForeignKey(blank=True, help_text='The user for the vote', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_votes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'post_votes',
            },
        ),
        migrations.CreateModel(
            name='PostTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post', models.ForeignKey(help_text='The post', on_delete=django.db.models.deletion.CASCADE, related_name='post_tags', to='stackexchange.post')),
                ('tag', models.ForeignKey(help_text='The tag', on_delete=django.db.models.deletion.CASCADE, related_name='post_tags', to='stackexchange.tag')),
            ],
            options={
                'db_table': 'post_tags',
            },
        ),
        migrations.CreateModel(
            name='PostLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('1', 'Linked'), ('3', 'Duplicate')], help_text='The post link type', max_length=1)),
                ('post', models.ForeignKey(help_text='The post', on_delete=django.db.models.deletion.CASCADE, related_name='post_links', to='stackexchange.post')),
                ('related_post', models.ForeignKey(help_text='The related post', on_delete=django.db.models.deletion.CASCADE, related_name='related_post_links', to='stackexchange.post')),
            ],
            options={
                'db_table': 'post_links',
            },
        ),
        migrations.CreateModel(
            name='PostHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('1', 'Initial Title'), ('2', 'Initial Body'), ('3', 'Initial Tags'), ('4', 'Edit Title'), ('5', 'Edit Body'), ('6', 'Edit Tags'), ('7', 'Rollback Title'), ('8', 'Rollback Body'), ('9', 'Rollback Tags'), ('10', 'Post Closed'), ('11', 'Post Reopened'), ('12', 'Post Deleted'), ('13', 'Post Undeleted'), ('14', 'Post Locked'), ('15', 'Post Unlocked'), ('16', 'Community Owned'), ('17', 'Post Migrated'), ('18', 'Question Merged'), ('19', 'Question Protected'), ('20', 'Question Unprotected'), ('21', 'Post Disassociated'), ('22', 'Question Unmerged')], help_text='The post history type', max_length=2)),
                ('revision_guid', models.CharField(help_text='The GUID of the action that created this history record', max_length=36)),
                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='The date that this history record was created')),
                ('user_display_name', models.CharField(blank=True, help_text='The display name of the user that created this record, if the user has been removed and no longer referenced by id', max_length=255, null=True)),
                ('comment', models.TextField(blank=True, help_text='The comment of the user that has edited this post', null=True)),
                ('text', models.TextField(blank=True, help_text='The new value for a given revision', null=True)),
                ('post', models.ForeignKey(help_text='The post', on_delete=django.db.models.deletion.CASCADE, related_name='post_history', to='stackexchange.post')),
                ('user', models.ForeignKey(blank=True, help_text='The user that created this history record', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_post_history', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'post history',
                'db_table': 'post_history',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(help_text='The comment score')),
                ('text', models.TextField(help_text='The comment text')),
                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='The date that the comment was created')),
                ('post', models.ForeignKey(help_text='The post', on_delete=django.db.models.deletion.CASCADE, related_name='post_comments', to='stackexchange.post')),
                ('user', models.ForeignKey(blank=True, help_text='The user for the comment', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_comments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'comments',
            },
        ),
    ]
